>mysql -u root -proot
> create database se2102;
> use se2102;

> create table student(
> sno char(8) primary key,
> sname varchar(20) unique,
> ssex char(6),
> sbirthdate date,
> smajor varchar(40)
> );

3.4.1 插入数据
insert into 表名[（列名1....）] values(常量1....）;
> insert into student values('20180001','李勇','男','2000-3-8','信息安全');
insert into student(sno,sname,ssex,sbirthdate,smajor) values('20180010','李红','女','2005-10-1','软件工程');

如果出现不成功：
show variables like 'char%';
set name gbk;

select * from student; //查询表中的数据


> insert into student values(
> '20180003','王敏','女','2001-08-01','计算机科学与技术'),
> ('20180004','张立','男','2000-01-08','计算机科学与技术'); //插入多个元组

insert into student(sname,sno) valuse('李勇','20180001');


插入子查询结果（将已有的数据写入到新建的表内）：
插入子查询的值：
insert into 表名[(列名1....)] select 子句;
create table xs(sno char(8));
insert into xs student sno from student;

查看当前年份：
select year(now());

查看表中学生的年龄：
select year(now())-year(sbirthdate) form student;

查看表中学生的平均年龄：
select avg(year(now())-year(sbirthdate)) form student group by smajor;

查看每个专业的学生的平均年龄：
select smajor,avg year(now())-year(sbirthdate) form student group by smajor;

查看性别的学生的平均年龄：
select ssex,avg year(now())-year(sbirthdate) form student group by smajor;

创建一个新的表格，把之前表计算的平均年龄插入到新的表内：
> create table smajor_age(
> smajor varchar(20),
> avg_age int);

> insert into smajor_age
> select smajor,avg(year(now())-year(sbirthdate)) from student group by smajor;

修改数据：
update 表名 set 列名1=值|表达式....[where 条件];
update student set smajor='软件工程',ssex='男' where sno='20180011';

update student set ssex='男',sbirthdate='2001-11-1',smajor='信息管理与信息系统' where sno='20180005';

修改多个元组的值：
update student set ssex='男';

3.4.3 删除数据：
delete from 表名 [where 条件];
delete from student; == truncate table student;

delete from student where sno='20180005';  //删除学号
delete from xs; //删除表中的所有数据
truncate table smajor_avg;  //清空表中的所有数据






创建三个表格：


#学生表
CREATE TABLE Student          
(Sno   CHAR(8) PRIMARY KEY, 
Sname VARCHAR(20) UNIQUE,            
Ssex  CHAR(6),
Sbirthdate   date,
Smajor  varCHAR(40)
); 

#课程表
create table course
(Cno CHAR(5) PRIMARY KEY,
Cname CHAR(40) not null,
Cpno  CHAR(5),
Ccredit SMALLINT,
FOREIGN KEY (Cpno) REFERENCES Course(Cno)
); 

#学生选课表
CREATE TABLE SC
(Sno CHAR(8),
Cno CHAR(5),
Grade SMALLINT,
Semester char(5),
Teachingclass char(8),
PRIMARY KEY (Sno,Cno),
FOREIGN KEY (Sno) REFERENCES Student(Sno),
FOREIGN KEY (Cno)REFERENCES Course(Cno)
);


#数据更新
insert into student values('20180001','李勇','男','2000-3-8','信息安全');
insert into student values('20180002','刘晨','女','1999-9-1','计算机科学与技术');
insert into student values('20180003','王敏','女','2001-8-1','计算机科学与技术');
insert into student values('20180004','张立','男','2000-1-8','计算机科学与技术');
insert into student values('20180005','陈新奇','男','2001-11-1','信息管理与信息系统');
insert into student values('20180006','赵明','男','2000-6-12','数据科学与大数据技术');
insert into student values('20180007','王佳佳','女','2001-12-7','数据科学与大数据技术');


insert into course(cno,cname,ccredit,cpno) values('81001','程序设计基础与C语言',4,NULL);
insert into course(cno,cname,ccredit,cpno) values('81007','离散数学',4,NULL);
insert into course(cno,cname,ccredit,cpno) values('81002','数据结构',4,'81001');
insert into course(cno,cname,ccredit,cpno) values('81005','操作系统',4,'81001');
insert into course(cno,cname,ccredit,cpno) values('81003','数据库系统概论',4,'81002');
insert into course(cno,cname,ccredit,cpno) values('81006','Python语言',3,'81002');
insert into course(cno,cname,ccredit,cpno) values('81004','信息系统概论',4,'81003');
insert into course(cno,cname,ccredit,cpno) values('81008','大数据技术概论',4,'81003');


insert into sc     values('20180001','81001',85,'20192','81001-01');
insert into sc     values('20180001','81002',96,'20201','81002-01');
insert into sc     values('20180001','81003',87,'20202','81003-01');
insert into sc     values('20180002','81001',80,'20192','81001-02');
insert into sc     values('20180002','81002',98,'20201','81002-01');
insert into sc     values('20180002','81003',71,'20202','81003-02');
insert into sc     values('20180003','81001',81,'20192','81001-01');
insert into sc     values('20180003','81002',76,'20201','81002-02');
insert into sc     values('20180004','81001',56,'20192','81001-02');
insert into sc     values('20180004','81002',97,'20201','81002-02');
insert into sc     values('20180005','81003',68,'20202','81003-01');



将计算机科学与技术的学习成绩改成0：
> update sc set grade=0 where sno in(select sno from student where smajor='计算机科学与技术');

将选修数据结构的计算机科学与技术专业的学生的生日都改成‘2023-10-8’：


> update student set sbirthdate='2023-10-8' where smajor='计算机科学与技术'
and sno in(select sno from sc where cno in
(select cno from course where cname='数据结构'));
 
select * from student;
select * from course;

删除计算机科学与技术专业所有学生的选课记录：
> delete from sc where sno in(select sno from student where smajor='计算机科学与技术');

删除数据库系统概论的选课信息：
> delete from sc where cno in(select cno from course where cname='数据库系统概论');




3.3查询：

select all/distinct
select year(now())-year(sbirthdate) sage  from student   别名称：sage  查询学生的年龄
group by 列名 having语句 条件表达式        having语句只能跟在后面，限制作用   e.g    avg(grade)>90;

3.3.1 单表查询

1.选择表中的若干列
（1）选择指定列
    select sno,sname from student;
（2）选择所有列
    select sno,sname,ssex,sbirthdate,smajor from student;
    select * from student;
 (3) 查询经过计算的值
     查询所有学生的学号，姓名，年龄：
    select sno,sname,year(now())-year(sbirthdate) from student;
    select (extract(yaer from current_date)-extract(yaer from sbirthdate)) from student;  （了解）

 (4) 修改列别名
    select sno学号,sname姓名,year(now())-year(sbirthdate)年龄 from student;

2.选择表中的若干元组
 (1)消除重复行:distinct
  查询学生来自的专业：
  查询选课的学生学号：
  select distinct smajor from student;
  select distinct sno from sc;

 (2)查询满足条件的元组
 A.比较大小:>,<,=,      不等于：!=,<>....
 查询计算机科学与技术专业年龄大于22岁的学生的学号，姓名，年龄；
 select sno,sname,year(now())-year(sbirthdate) from student where smajor=’计算机科学与技术’ and year(now())-year(sbirthdate)>22;
 
 B.确定范围：[not] between....and....
 查询成绩是良好（80-90）的学生的学号，成绩；
 select sno,grade from sc where grade between 80 and 90;
 select sno,grade from sc where grade>=80 and grade<90;
 select sno,grade from sc where grade not between 80 and 90; //不在这个范围

 C.确定集合：in
 查询计算机科学与技术和信息安全专业的同学的信息；
 select * from student where smajor in ('计算机科学与技术','信息安全');
 select * from student where smajor='计算机科学与技术' or smajor='信息安全';
 
 查询成绩是70，80，90的学生的学号和成绩；
 select sno,grade from sc where grade in (70,80,90) ;

 D.字符匹配：like,   //任意单个字符 '_',  //任意多个字符 '%' ， //escape 转义
 select * from student where sname like '刘%'; //查询学生姓刘的学生，任意多个字符：刘某某
 select * from student where sname like '王%';  //查询学生姓王的学生，单个字符：王
 
 查询学号倒数第三位是0的学生的信息
 select * from student where sno like '%0__';
 
 插入course表：
 insert into course valuse('81009','DB_Design',3,null),('81010','DBSHEJI',4,null);
 
 查询开头三'DB_'的课程信息：
 select * from course where sname like 'DB#_%' escape '#';  //将_变成的普通的字符，DB#_

 E.空值判断：is null ，is not null
 查询先修课cpno为空的课程信息；
 select * from course where cpno is null;
 select * from course where cpno is not null;//不为空的课程信息
 
 F.多重条件查询：and，or，not
 查询成绩在90分以上的学分为4的课程信息：
 select * from course where ccredit=4 and cno in(select cno from sc where grade>90);
 
 查询成绩在90分以上的计算机科学与技术专业的男生同学的信息：
 select * from student where smajor='计算机科学与技术' and ssex='男' and sno in(select sno from sc where grade>90);
 
 查询数据结构和程序设计基础与c语言的选课成绩：
 SELECT Grade FROM sc WHERE Cno IN
 (SELECT Cno FROM course WHERE cname in('数据结构','程序设计基础与c语言'));
  select cno from course where cname='数据结构' or cname='程序设计基础与c语言';

3.ORDER BY:排序，后面跟列名|表达式，asc升序，desc降序；
 A.
 在学生表中，将学生的信息按照年龄的升序排列
 select * from student ORDER BY year(now())-year(sbirthdate);
 select * from student ORDER BY sbirthdate desc; 以年龄降序排列

 将计算机科学与技术的同学按照其选课的平均成绩进行降序排列：
 SELECT sno, avg(grade) FROM sc where sno in (SELECT sno from student where smajor='计算机科学与技术') GROUP BY sno ORDER BY avg(grade) desc;
 select * from student where smajor='计算机科学与技术' order by (select avg(grade) from sc where student.sno=sc.sno HROUP BY sno) desc;

4.聚集函数：count,sum,MAX,min,avg

 查询学生来自几个专业；
 查询选课的学生人数；
 查询学生选课成绩的最大值和最小值；

 select count(DISTINCT smajor) 专业数目 from student;
 select count(DISTINCT sno) 选课人数 from sc;
 select MAX(grade),MIN(grade) from sc;
 
5.GROUP BY:分组(原理？),having表示对分组后条件的限制；

 查询学生的学号，平均成绩；
 查询课程的课程号，平均成绩，并按照平均成绩降序排列；
 select sno,avg(grade) from sc where sno in (select sno from student) group by sno;// select sno,avg(grade) from sc group by sno;
 select sno,avg(grade) from sc group by cno order by avg(grade) desc;
 
 查询学生的平均年龄大于20岁的专业名；
 查询平均分大于90分以上的课程名；
 select smajor,avg(year(now())-year(sbirthdate)) from student group by smajor having avg(year(now())-year(sbirthdate))>20;
 select cname from course where cno in(select cno from sc group by cno having avg(grade)>90);


6.limit子句
 limit m;查询出m个元组
 limit m,n 查询从m+1行开始的n个元组

 查询成绩在前五名的学生学号：
 select sno,grade from sc order by grade dsec limit 5;

 查询成绩在6-10名的学生学号，成绩；
 select sno,grade from sc order by grade desc limit5,5;
 